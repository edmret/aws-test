# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: test-service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  #serverless-mocha-plugin:
    #postTestCommands:
      #- npm
  stages:
    - dev
    - staging
    - qa
    - prod
  accountId:
    local: 928410696171
    dev: 928410696171
    qa: 928410696171
    staging: 928410696171
    prod: 928410696171
  region:
    local: us-east-1
    dev: us-east-1
    qa: us-east-2
    staging: us-east-1
    prod: us-east-1
  itemsTable:
    local: basicOperationsItemsTable
    dev: basicOperationsItemsTable
    qa: basicOperationsItemsTableQA
    staging: basicOperationsItemsTable
    prod: basicOperationsItemsTable
  queueName:
    local: MyQueue
    dev: MyQueue
    qa: QaQue
    staging: MyQueue
    prod: MyQueue
  settings:
    ITEMS_DYNAMODB_TABLE: ${self:custom.itemsTable.${self:provider.stage}}
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${self:custom.accountId.${self:provider.stage}}
    QUEUE_NAME: ${self:custom.queueName.${self:provider.stage}}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  region: ${self:custom.region.${self:provider.stage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: "arn:aws:sqs:${self:provider.region}:*:${self:custom.settings.QUEUE_NAME}"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.ITEMS_DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "arn:aws:ses:${self:provider.region}:*:identity/*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment: ${self:custom.settings}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    description: Demo test
    events:
      - http:
          path: hello
          method: get
  sqsHello:
    handler: handler.sqsHello
    events:
      - sqs: arn:aws:sqs:${self:provider.region}:*:${self:custom.settings.QUEUE_NAME}
      - sqs:
          arn:
            Fn::GetAtt:
                - ${self:custom.settings.QUEUE_NAME}
                - Arn
          batchSize: 1
  saveItem:
    handler: handler.saveItem
    events:
      - http:
          path: item
          method: post
  getItem:
    handler: handler.getItem
    events:
      - http:
          path: item/{itemId}
          method: get
  getAll:
    handler: handler.getAll
    events:
      - http:
          path: items
          method: get
          cors: true
  deleteItem:
    handler: handler.deleteItem
    events:
      - http:
          path: item/{itemId}
          method: delete
  updateItem:
    handler: handler.updateItem
    events:
      - http:
          path: item/{itemId}
          method: put
  sendEmail:
    handler: handler.sendEmail
    events:
      - http:
          path: sendemail
          method: get
resources:
  - Resources:
      basicOperationsItemsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:custom.settings.ITEMS_DYNAMODB_TABLE}
          AttributeDefinitions:
            - AttributeName: "itemId"
              AttributeType: "S"
          KeySchema:
            - AttributeName: "itemId"
              KeyType: "HASH"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
  - ${file(./resources-${self:provider.stage}.yml)}
plugins:
  - serverless-mocha-plugin
  - serverless-stage-manager
#    runtime: nodejs8.10
#    

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
